{"version":3,"sources":["components/Home.js","components/About.js","components/Posts.js","App.js","serviceWorker.js","index.js"],"names":["Home","About","Child","match","params","id","Posts","state","posts","title","this","className","map","post","key","to","path","component","React","Component","App","style","margin","exact","activeClassName","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2PAUeA,MARf,WACC,OACC,6BACC,gDCIYC,MARf,WACE,OACA,6BACC,iD,gCCAH,SAASC,EAAT,GAA2B,IAAVC,EAAS,EAATA,MAChB,OACC,6BACC,mCAASA,EAAMC,OAAOC,K,IAyCVC,E,4MAnCdC,MAAQ,CACPC,MAAO,CACN,CACCH,GAAI,EACJI,MAAO,qBAER,CACCJ,GAAI,EACJI,MAAO,kBAER,CACCJ,GAAI,EACJI,MAAO,2B,uDAKA,IACDD,EAAUE,KAAKH,MAAfC,MACR,OACC,yBAAKG,UAAU,SACd,0CACA,4BACEH,EAAMI,KAAI,SAAAC,GAAI,OACd,wBAAIC,IAAKD,EAAKR,IACb,kBAAC,IAAD,CAAMU,GAAE,iBAAYF,EAAKR,KAAOQ,EAAKJ,YAIxC,kBAAC,IAAD,CAAOO,KAAK,aAAaC,UAAWf,S,GA9BpBgB,IAAMC,WCwBXC,MA7Bf,WAEC,OACC,kBAAC,IAAD,KACC,6BACC,yBAAKC,MAAO,CAAEC,OAAQ,KACrB,kBAAC,IAAD,CAASP,GAAG,IAAIQ,OAAK,EAACC,gBAAgB,UAAtC,QAGA,kBAAC,IAAD,CAAST,GAAG,SAASS,gBAAgB,UAArC,SAGA,kBAAC,IAAD,CAAST,GAAG,SAASS,gBAAgB,UAArC,UASD,kBAAC,IAAD,CAAOD,OAAK,EAACP,KAAK,IAAIC,UAAW,kBAAI,kBAAC,EAAD,SACnC,kBAAC,IAAD,CAAOM,OAAK,EAACP,KAAK,SAASC,UAAW,kBAAI,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOM,OAAK,EAACP,KAAK,SAASC,UAAY,kBAAI,kBAAC,EAAD,YClB7BQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASzB,MACvB,2DCZN0B,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.9f83d636.chunk.js","sourcesContent":["import React from \"react\"\n\nfunction Home() {\n\treturn (\n\t\t<div>\n\t\t\t<h1>Home Component</h1>\n\t\t</div>\n\t)\n}\n\nexport default Home\n","import React from \"react\"\nfunction About() {\n\t\treturn (\n\t\t<div>\n\t\t\t<h1>About Component</h1>\n\t\t</div>\n\t)\n}\n\nexport default About\n","import React from \"react\"\nimport { Link, Route } from \"react-router-dom\"\nimport \"../App.css\"\n\nfunction Child({ match }) {\n\treturn (\n\t\t<div>\n\t\t\t<h3>ID: {match.params.id}</h3>\n\t\t</div>\n\t)\n}\n\nclass Posts extends React.Component {\n\tstate = {\n\t\tposts: [\n\t\t\t{\n\t\t\t\tid: 1,\n\t\t\t\ttitle: \"Hello Blog World!\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 2,\n\t\t\t\ttitle: \"My second post\"\n\t\t\t},\n\t\t\t{\n\t\t\t\tid: 3,\n\t\t\t\ttitle: \"What is React Router?\"\n\t\t\t}\n\t\t]\n\t}\n\n\trender() {\n\t\tconst { posts } = this.state\n\t\treturn (\n\t\t\t<div className='posts'>\n\t\t\t\t<h1>Posts List</h1>\n\t\t\t\t<ul>\n\t\t\t\t\t{posts.map(post => (\n\t\t\t\t\t\t<li key={post.id}>\n\t\t\t\t\t\t\t<Link to={`/posts/${post.id}`}>{post.title}</Link>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t))}\n\t\t\t\t</ul>\n\t\t\t\t<Route path='/posts/:id' component={Child} />\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default Posts\n","import React from \"react\"\nimport { BrowserRouter as Router, Route, NavLink } from \"react-router-dom\"\nimport \"./App.css\"\n\nimport Home from \"./components/Home\"\nimport About from \"./components/About\"\nimport Posts from \"./components/Posts\"\nfunction App() {\n\n\treturn (\n\t\t<Router>\n\t\t\t<div>\n\t\t\t\t<nav style={{ margin: 10 }}>\n\t\t\t\t\t<NavLink to='/' exact activeClassName='active'>\n\t\t\t\t\t\tHome\n\t\t\t\t\t</NavLink>\n\t\t\t\t\t<NavLink to='/about' activeClassName='active'>\n\t\t\t\t\t\tAbout\n\t\t\t\t\t</NavLink>\n\t\t\t\t\t<NavLink to='/posts' activeClassName='active'>\n\t\t\t\t\t\tPosts\n\t\t\t\t\t</NavLink>\n\t\t\t\t</nav>\n\t\t\t\t{/* <Route path='/' exact component={Home} />\n\t\t\t\t<Route path='/about' component={About} />\n\t\t\t\t<Route path='/posts' exact component={Posts} />\n\t\t\t\t<Route path='/posts/:postId' exact component={Posts} /> */}\n\n\t\t\t\t<Route exact path=\"/\" component={()=><Home/>} />\n  \t\t\t\t<Route exact path=\"/about\" component={()=><About/>} />\n  \t\t\t\t<Route exact path=\"/posts\" component ={()=><Posts/>}/>\n\t\t\t</div>\n\t\t</Router>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}